name: Release IPQ CZC

on:
  workflow_dispatch:
  schedule:
    # 北京时间周五0点 = UTC时间周四16:00
    - cron: '0 16 * * 4'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # 定义芯片架构变量，仅用于区分缓存，缓存键(key)是区分不同缓存的唯一方式
  CHIP: ipq60xx
jobs:
  build:
    strategy:
      matrix:
        model:
          - ipq60xx_immwrt_Pro
          - ipq60xx_immwrt_Max
          - ipq60xx_immwrt_Ultra
          - ipq60xx_libwrt_Pro
          - ipq60xx_libwrt_Max
          - ipq60xx_libwrt_Ultra

        os: [ubuntu-24.04] # 矩阵用于遍历所有设备模型，实现批量编译，每个模型需要独立的构建环境和输出，保留矩阵可以方便未来扩展。

      # max-parallel: 3
    runs-on: ${{ matrix.os }}
    steps:
      - name: Free disk space
        uses: sbwml/actions@free-disk
      - name: Build System Setup
        run: |
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E apt -yqq install dos2unix
          sudo -E apt -yqq install libfuse-dev
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E systemctl daemon-reload
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set Execute Permissions
        run: |
          echo "=== 设置执行权限 ==="
          find . -name "*.sh" -type f -exec sh -c 'head -n1 "$1" | grep -q "^#!/" && chmod +x "$1"' _ {} \;
      - name: Set Build Date and Timezone
        run: |
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          export BUILD_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          export BUILD_SRC=$(awk -F"=" '/REPO_URL/ {print $NF}' "./compilecfg/${{ matrix.model }}.ini")
          echo "BUILD_SRC=$BUILD_SRC" >> $GITHUB_ENV
          echo "使用芯片架构: ${{ env.CHIP }}"
      - name: Pre Clone
        run: ./pre_clone_action.sh ${{ matrix.model }}
      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ./action_build/.ccache
            ./action_build/staging_dir
          # 使用预定义的CHIP变量
          key: ${{ matrix.os }}-${{ env.CHIP }}-${{ hashFiles('**/repo_flag') }}-${{ env.BUILD_DATE }}
          restore-keys: |
            ${{ matrix.os }}-${{ env.CHIP }}-${{ hashFiles('**/repo_flag') }}-
            ${{ matrix.os }}-${{ env.CHIP }}-
      - name: Refresh the cache
        run: |
          if [ -d "./action_build/staging_dir" ]; then
            find "./action_build/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r dir; do
                find "$dir" -type f -exec touch {} +
            done
          fi
      - name: Build Firmware
        run: ./build.czc.sh ${{ matrix.model }}
      - name: Get Kernel Version
        run: |
          # 获取内核版本
          echo "KVER=$(find ./action_build/dl -maxdepth 1 -name "linux-[4-6]\.*" | sort -r | head -n 1 | grep -oE "[4-6]\.[0-9]{1,3}\.[0-9]{1,3}")" >> $GITHUB_ENV
      - name: Delete Old Cache
        run: |
          # 获取缓存列表并删除
          gh cache list --key ${{ matrix.os }}-${{ env.CHIP }}-${{ hashFiles('**/repo_flag') }}- --json key --jq '.[] | .key' | while read -r key; do
            gh cache delete "$key"
          done
          # 输出缓存状态
          echo "========cache status========"
          echo "ccache: $(du -sh ./action_build/.ccache | cut -f 1)"
          echo "staging: $(du -sh ./action_build/staging_dir | cut -f 1)"
      - name: Machine Information
        run: |
          echo "=============================================="
          lscpu | grep -E "name|Core|Thread"
          echo "=============================================="
          df -h
          echo "=============================================="
      - name: Upload Firmware Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.model }}
          path: ./temp_firmware/${{ matrix.model }}/
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set Build Date
        run: |
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          export BUILD_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-firmware
      - name: Prepare firmware directory
        run: |
          # 创建固件目录
          mkdir -p firmware
          # 将所有固件文件复制到一个目录
          find all-firmware -name "*.*" -type f -not -path "*/ipk/*" -not -path "*/apk/*" -exec cp {} firmware/ \;
          
          # 复制合并后的ipk和apk目录
          cp -r all-firmware/*/ipk firmware/ 2>/dev/null || true
          cp -r all-firmware/*/apk firmware/ 2>/dev/null || true
          
          # 创建包含所有ipk和apk的压缩包（仅当目录存在且有内容时）
          cd firmware
          
          # 检查ipk目录是否存在且有内容
          if [ -d "ipk" ] && [ "$(ls -A ipk 2>/dev/null)" ]; then
              echo "Creating ipk_packages.tar.gz..."
              tar -czf ipk_packages.tar.gz ipk/
          else
              echo "ipk directory is empty or does not exist, skipping ipk package creation"
          fi
          
          # 检查apk目录是否存在且有内容
          if [ -d "apk" ] && [ "$(ls -A apk 2>/dev/null)" ]; then
              echo "Creating apk_packages.tar.gz..."
              tar -czf apk_packages.tar.gz apk/
          else
              echo "apk directory is empty or does not exist, skipping apk package creation"
          fi
          
          cd ..
          
          # 准备发布说明
          echo "IPQ60xx 固件批量发布" > release_body.txt
          echo "构建时间: $BUILD_DATE" >> release_body.txt
          echo "包含以下型号:" >> release_body.txt
          echo "- ipq60xx_immwrt_Pro" >> release_body.txt
          echo "- ipq60xx_immwrt_Max" >> release_body.txt
          echo "- ipq60xx_immwrt_Ultra" >> release_body.txt
          echo "- ipq60xx_libwrt_Pro" >> release_body.txt
          echo "- ipq60xx_libwrt_Max" >> release_body.txt
          echo "- ipq60xx_libwrt_Ultra" >> release_body.txt
          echo "" >> release_body.txt
          echo "WIFI密码: 12345678" >> release_body.txt
          echo "LAN地址: 192.168.111.1" >> release_body.txt
          echo "" >> release_body.txt
          echo "本发布包含以下文件:" >> release_body.txt
          echo "- 各型号固件文件 (.bin, .manifest, .config等)" >> release_body.txt
          
          # 根据实际情况添加ipk和apk包的信息
          if [ -f "firmware/ipk_packages.tar.gz" ]; then
              echo "- 合并后的ipk包 (ipk_packages.tar.gz)" >> release_body.txt
              echo "" >> release_body.txt
              echo "IPK包数量: $(find firmware/ipk -name "*.ipk" | wc -l)" >> release_body.txt
          fi
          
          if [ -f "firmware/apk_packages.tar.gz" ]; then
              echo "- 合并后的apk包 (apk_packages.tar.gz)" >> release_body.txt
              echo "" >> release_body.txt
              echo "APK包数量: $(find firmware/apk -name "*.apk" | wc -l)" >> release_body.txt
          fi
      - name: Release Firmware
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.BUILD_DATE }}-${{ env.CHIP }}-ChatZ
          files: |
            ./firmware/*.*
            !./firmware/ipk/
            !./firmware/apk/
          body_path: ./release_body.txt
